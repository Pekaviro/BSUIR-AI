#include "rbtree.h"
#include <cassert>

int main() {

	setlocale(LC_ALL, "Russian");

	Node* root = new Node{ 13, nullptr, nullptr, nullptr, 0 };

	Print(root);

	/*1-й тест*/
	//В случае вставки первой некорневой вершины, она всегда остаётся красной
	InsertNode(root, 17);	
	assert(Find(root, 17)->Red);

	cout << "Первый тест пройден успешно.\n";

	/*2-й тест*/
	//В случае вставки таких вершин в таком порядке, вершина 17 перекрасится в чёрный
	InsertNode(root, 11);
	InsertNode(root, 16); 
	InsertNode(root, 20);
	assert(!Find(root, 17)->Red);

	cout << "Второй тест пройден успешно.\n";

	/*3-й тест*/
	//После вставки вершин с ключами 7 и 5, левым потомком корня дерева должен стать узел с ключом 7
	InsertNode(root, 7);
	InsertNode(root, 5); 
	assert(root->left->value == 7);

	cout << "Третий тест пройден успешно.\n";

	/*4-й тест*/
	//После вставки узла с ключом 12, левый потомок от корня должен перекраситься в красный цвет
	InsertNode(root, 12); 
	assert(root->left->Red = 1);

	cout << "Четвёртый тест пройден успешно.\n";

	/*5-й тест*/
	//Поиск максимального элемента в дереве, в нашем случае это - 20
	cout << FindMax(root)<<endl;
	assert(FindMax(root) == 20); 
	cout << "Пятый тест пройден успешно.\n";

	/*6-й тест*/
	//Поиск минимального элемента в дереве, в нашем случае это - 5
	cout<<FindMin(root)<<endl;
	assert(FindMin(root) == 5); 
	cout << "Шестой тест пройден успешно.\n";

	/*7-й тест*/
	//Поиск ближайшего меньшего элемента для вершины 13. Этим элементом будет 12
	cout << FindNearestMin(root, 13)<< endl;
	assert(FindNearestMin(root, 13) == 12); 
	cout << "Седьмой тест пройден успешно.\n";

	/*8-й тест*/
	//Поиск ближайшего большего элемента для вершины 20. Этот элемент максимальный
	assert(FindNearestMax(root, 20) == 20);
	cout << "Восьмой тест пройден успешно.\n";

	/*9-й тест*/
	//Поиск несуществующей вершины в дереве
	assert(Find(root, 23) == nullptr); 
	cout << "Девятый тест пройден успешно.\n";

	/*10-й тест*/
	//Вывод информации обо всём дереве на экран
	Print(root);
	cout << "Десятый тест пройден успешно.\n";

	return 0;
}